import torch.nn as nn
import torch

class Encoder(nn.Module):
    
    def __init__(self, latent_dim):
        super().__init__()
        
        ### Convolutional section
        self.encoder_cnn = nn.Sequential(
            nn.Conv2d(1, 64, 3, stride=1, padding=1), 
            nn.ReLU(True),        #(28x28)
            nn.Conv2d(64, 64, 3, stride=1, padding=1), 
            nn.MaxPool2d(2), 


            nn.Conv2d(64, 128, 3, stride=1, padding=1), 
            nn.ReLU(True),              #(14x14)
            nn.Conv2d(128, 128, 3, stride=1, padding=1), 
            nn.MaxPool2d(2), 


            nn.Conv2d(128, 256, 3, stride=1, padding=1), 
            nn.ReLU(True),              #(7x7)
            nn.Conv2d(128, 128, 3, stride=1, padding=1), 
            
            
            nn.Conv2d(256, 256, 3, stride=2, padding=0),# (3x3)
            nn.ReLU(True)
        )
        
        ### Flatten layer
        self.flatten = nn.Flatten(start_dim=1)
        
        ### Linear section
        self.encoder_lin = nn.Sequential(
            nn.Linear(3 * 3 * 256, 128),
            nn.ReLU(True),
            nn.Linear(128, latent_dim)
        )
        
    def forward(self, x):
        x = self.encoder_cnn(x)
        x = self.flatten(x)
        x = self.encoder_lin(x)
        return x
    
class Decoder(nn.Module):
    
    def __init__(self, latent_dim):
        super().__init__()
        self.decoder_lin = nn.Sequential(
            nn.Linear(latent_dim, 128),
            nn.ReLU(True),
            nn.Linear(128, 3 * 3 *256),
            nn.ReLU(True)
        )

        self.unflatten = nn.Unflatten(dim=1, 
        unflattened_size=(256, 3, 3))

        self.decoder_conv = nn.Sequential(
            nn.ConvTranspose2d(256, 128, 3, 
            stride=2, output_padding=0),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            
            nn.ConvTranspose2d(128,64, 3, stride=2, 
            padding=1, output_padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, 1, 3, stride=2, 
            padding=1, output_padding=1)
        )
        
    def forward(self, x):
        x = self.decoder_lin(x)
        x = self.unflatten(x)
        x = self.decoder_conv(x)
        x = torch.sigmoid(x)
        return x